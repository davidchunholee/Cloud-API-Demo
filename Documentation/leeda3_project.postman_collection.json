{
	"info": {
		"_postman_id": "93f02238-1d0f-4d9d-942c-edc4b39f8bc7",
		"name": "hw9_leeda3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "View users, unprotected",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat no JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 401",
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Missing JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Sea Witch\",\n  \"type\": \"Catamaran\",\n  \"length\": 28\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 401",
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Invalid JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Sea Witch\",\n  \"type\": \"Catamaran\",\n  \"length\": 28\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_1 valid JWT1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"boat_id_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"boat_name_1\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat_type_1\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat_length_1\", pm.response.json()[\"length\"]);",
							"pm.environment.set(\"boat_owner_1\", pm.response.json()[\"owner\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_1\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_1\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_1\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Sea Witch\",\n  \"type\": \"Catamaran\",\n  \"length\": 28\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_2 valid JWT1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"boat_id_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"boat_name_2\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat_type_2\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat_length_2\", pm.response.json()[\"length\"]);",
							"pm.environment.set(\"boat_owner_2\", pm.response.json()[\"owner\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_2\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_2\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_2\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_2\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_1\"));    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Sea Witch v2\",\n  \"type\": \"Catamaran v2\",\n  \"length\": 38\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_3 valid JWT2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"boat_id_3\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"boat_name_3\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat_type_3\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat_length_3\", pm.response.json()[\"length\"]);",
							"pm.environment.set(\"boat_owner_3\", pm.response.json()[\"owner\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_3\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_3\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_3\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_3\"));    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Odyssey\",\n  \"type\": \"Yatch\",\n  \"length\": 60\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_4 valid JWT2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"boat_id_4\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"boat_name_4\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat_type_4\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat_length_4\", pm.response.json()[\"length\"]);",
							"pm.environment.set(\"boat_owner_4\", pm.response.json()[\"owner\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_4\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_4\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_4\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_4\"));   ",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_3\"));      ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Odyssey v2\",\n  \"type\": \"Yatch v2\",\n  \"length\": 99\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat missing attributes, valid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Sea Witch v3\",\n  \"type\": \"Catamaran v3\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid method - DEL /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Sea Witch v3\",\n  \"type\": \"Catamaran v3\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Not accepting application/json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unsupported Media Type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Sea Witch v3\",\n  \"type\": \"Catamaran v3\",\n  \"length\": 50\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boats no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 401",
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Missing JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boats invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 401",
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Invalid JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boats with JWT1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 200",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cur_boats = pm.response.json()[\"Total boats\"];",
							"pm.test(\"only correct number of boats in response\", function () {",
							"    pm.expect(cur_boats).to.eq(2)",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.test(\"next property does not exist\", function () {",
							"    pm.expect(jsonData).to.not.have.property(\"next\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boats with JWT2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 200",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cur_boats = pm.response.json()[\"Total boats\"];",
							"pm.test(\"only correct number of boats in response\", function () {",
							"    pm.expect(cur_boats).to.eq(2)",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.test(\"next property does not exist\", function () {",
							"    pm.expect(jsonData).to.not.have.property(\"next\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "View boat_1 valid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_1\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_1\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_1\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_1\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_2\"));   ",
							"    // test for empty load for new boat",
							"    pm.expect(pm.response.json()[\"loads\"]).to.deep.eq([]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View boat_2 valid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_2\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_2\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_2\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_1\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_2\"));       ",
							"    // test for empty load for new boat",
							"    pm.expect(pm.response.json()[\"loads\"]).to.deep.eq([]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View boat_3 valid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_3\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_3\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_3\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_3\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_4\"));       ",
							"    // test for empty load for new boat",
							"    pm.expect(pm.response.json()[\"loads\"]).to.deep.eq([]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View boat_4 valid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_4\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_4\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_4\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_3\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_4\"));       ",
							"    // test for empty load for new boat",
							"    pm.expect(pm.response.json()[\"loads\"]).to.deep.eq([]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View boat_1 invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 401",
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Invalid JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View boat_1 missing JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 401",
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Missing JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View boat_1 with JWT2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 403",
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden: Boat owned by someone else\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Not accepting application/json as client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 401",
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept application/json\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat_1 invalid attr",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Updating invalid attribute\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 12345\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat_1 invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Invalid JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 12345\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat_1 missing jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Missing JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 12345\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat_1 not owned boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden: Boat owned by someone else\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Not owned boat should not work\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch boat_1 change name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_name_1\", pm.response.json()[\"name\"]);",
							"",
							"//Check status 200 for success",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"boat_id_1\"))",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_1\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_1\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_1\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Sea Witch\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch boat_1 update type and length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_type_1\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat_length_1\", pm.response.json()[\"length\"]);",
							"",
							"//Check status 200 for success",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"boat_id_1\"))",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_1\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_1\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_1\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"type\": \"Updated Catamaran\",\n    \"length\": 38\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch boat_1 update no attr",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 200 for success",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"boat_id_1\"))",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_1\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_1\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_1\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch invalid boat with JWT2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Not accepting application/json as client Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 401",
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unsupported Media Type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "content-type",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Not accepting application/json\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put boat_2 missing attr",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Odyssey v3\",\n    \"type\": \"Yacht v3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put boat_2 invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Invalid JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Odyssey v3\",\n    \"type\": \"Yacht v3\",\n    \"length\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put boat_2 missing JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Missing JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Odyssey v3\",\n    \"type\": \"Yacht v3\",\n    \"length\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put boat_2 JWT2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 403",
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden: Boat owned by someone else\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Odyssey v3\",\n    \"type\": \"Yacht v3\",\n    \"length\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put boat_2 JWT1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_name_2\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat_type_2\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat_length_2\", pm.response.json()[\"length\"]);",
							"",
							"//Check status 200 for success",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"boat_id_2\"))",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name_2\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type_2\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length_2\"));",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"boat_owner_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Odyssey v3\",\n    \"type\": \"Yacht v3\",\n    \"length\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put invalid boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Odyssey unfound\",\n    \"type\": \"Yacht unfound\",\n    \"length\": 50\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_4 invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Invalid JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_4 missing jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unauthorized: Missing JWT\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_4 jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 403",
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden: Boat owned by someone else\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete invalid boat JWT2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_4 success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat_4 after delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 404",
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"comment\": \"missing attr\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid method - DEL /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Sea Witch v3\",\n  \"type\": \"Catamaran v3\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"load_content_1\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load_volume_1\", pm.response.json()[\"volume\"]);",
							"pm.environment.set(\"load_price_1\", pm.response.json()[\"price\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_1\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_1\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"volume\": 10,\n    \"content\": \"Stool\",\n    \"price\": 15\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"load_content_2\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load_volume_2\", pm.response.json()[\"volume\"]);",
							"pm.environment.set(\"load_price_2\", pm.response.json()[\"price\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_2\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_2\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_2\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"Desks\",\n    \"volume\": 50,\n    \"price\": 250\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id_3\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"load_content_3\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load_volume_3\", pm.response.json()[\"volume\"]);",
							"pm.environment.set(\"load_price_3\", pm.response.json()[\"price\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_3\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_3\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_3\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"Chairs\",\n    \"volume\": 25,\n    \"price\": 150\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id_4\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"load_content_4\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load_volume_4\", pm.response.json()[\"volume\"]);",
							"pm.environment.set(\"load_price_4\", pm.response.json()[\"price\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_4\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_4\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_4\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"Couch\",\n    \"volume\": 250,\n    \"price\": 1250\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id_5\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"load_content_5\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load_volume_5\", pm.response.json()[\"volume\"]);",
							"pm.environment.set(\"load_price_5\", pm.response.json()[\"price\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_5\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_5\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_5\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"Cushion\",\n    \"volume\": 25,\n    \"price\": 50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id_6\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"load_content_6\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load_volume_6\", pm.response.json()[\"volume\"]);",
							"pm.environment.set(\"load_price_6\", pm.response.json()[\"price\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_6\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_6\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_6\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"Monitor\",\n    \"volume\": 15,\n    \"price\": 200\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cur_loads = pm.response.json()[\"Total loads\"];",
							"pm.test(\"only correct number of loads in response\", function () {",
							"    pm.expect(cur_loads).to.eq(6)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load_1 (new load, no carrier)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_1\"));",
							"    // test for empty carrier for new load",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_1\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch load_1 invalid attr",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Updating invalid attribute\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 12345\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch load_1 invalid load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"Leather Couch\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch Edit load_1 content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_content_1\", pm.response.json()[\"content\"]);",
							"",
							"//Check status 200 for success",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_1\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_1\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"Barstool\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch Edit load_1 volume/price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_volume_1\", pm.response.json()[\"volume\"]);",
							"pm.environment.set(\"load_price_1\", pm.response.json()[\"price\"]);",
							"",
							"//Check status 200 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_1\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_1\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"volume\": 12,\n    \"price\": 20\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put edit load_2 missing atr",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"volume\": 12,\n    \"price\": 20\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put edit invalid load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"invalid content\",\n    \"volume\": 12,\n    \"price\": 20\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put edit load_2 success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_content_2\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load_volume_2\", pm.response.json()[\"volume\"]);",
							"pm.environment.set(\"load_price_2\", pm.response.json()[\"price\"]);",
							"",
							"//Check status 200 for success",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_2\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_2\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_2\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"Standing desk\",\n    \"volume\": 12,\n    \"price\": 20\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete invalid load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 no content\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load_6 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id_6\", pm.response.json()[\"id\"]);",
							"",
							"pm.environment.set(\"load_content_6\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load_volume_6\", pm.response.json()[\"volume\"]);",
							"pm.environment.set(\"load_price_6\", pm.response.json()[\"price\"]);",
							"",
							"//Check status 201 for success",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(pm.environment.get(\"load_volume_6\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load_content_6\"));",
							"    pm.expect(pm.response.json()[\"price\"]).to.eq(pm.environment.get(\"load_price_6\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"Monitor\",\n    \"volume\": 15,\n    \"price\": 200\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load_1 to boat_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 204 for success",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load_2 to boat_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 204 for success",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load_3 to boat_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 204 for success",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id_3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id_3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load_4 to boat_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 204 for success",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load_5 to boat_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 204 for success",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id_5}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id_5}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load_6 to boat_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 204 for success",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id_6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id_6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load does not exist\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load does not exist\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid boat id & invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load does not exist\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "load already assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 not found\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden: Load is already assigned\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}",
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after assigned to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET boat_1 before removal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 200",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cur_loads = pm.response.json()[\"loads\"];",
							"pm.test(\"only correct number of boats in response\", function () {",
							"    pm.expect(cur_loads.length).to.eq(6)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load_1 from boat_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET load_1 after removal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 200",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET boat_1 after removal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 200",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cur_loads = pm.response.json()[\"loads\"];",
							"pm.test(\"only correct number of boats in response\", function () {",
							"    pm.expect(cur_loads.length).to.eq(5)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after removed from boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load - load not on this boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id is on the boat with this boat_id\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id is on the boat with this boat_id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id is on the boat with this boat_id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid boat id & invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id is on the boat with this boat_id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign load_1 to boat_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 204 for success",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET boat_1 after assigning load_1 again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status 200",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cur_loads = pm.response.json()[\"loads\"];",
							"pm.test(\"only correct number of boats in response\", function () {",
							"    pm.expect(cur_loads.length).to.eq(6)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after reassignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.not.eq(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_5}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_5}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_6}}"
					]
				}
			},
			"response": []
		}
	]
}